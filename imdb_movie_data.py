# -*- coding: utf-8 -*-
"""imdb movie data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lW6oHim-HxHKEGwT6Dc9XgMx0M9tmcqz
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

data = pd.read_csv("/content/IMDB-Movie-Data.csv")

data.head(10)

data.tail(10)

data.shape

print("number of rows",data.shape[0])
print("number of columns",data.shape[1])

data.info()

data.isnull().sum()



print("Any missing value?",data.isnull().values.any())

sns.heatmap(data.isnull())

per_missing = data.isnull().sum() *100 / len(data)
print(per_missing)

data.dropna(axis=0,inplace=True)

data.isnull().sum()



dup_data = data.duplicated().any()
dup_data

print("Are there any duplicate values?",dup_data)

data.describe()

data.columns

data[data["Runtime (Minutes)"] >= 180]["Title"]

data.groupby("Year")["Votes"].mean().sort_values(ascending=False)

sns.barplot(x="Year",y = "Votes",data=data)
plt.title("Votes By Year")
plt.show()

data.columns

data.groupby("Year")["Revenue (Millions)"].mean().sort_values(ascending=False)

sns.barplot(x="Year",y = "Revenue (Millions)",data=data)
plt.title("Revenue (Millions) By Year")
plt.show()

data.groupby("Director")["Rating"].mean().sort_values(ascending=True)

top10_len =data.nlargest(10,"Runtime (Minutes)")[["Title","Runtime (Minutes)"]].set_index("Title")

top10_len

sns.barplot(x="Runtime (Minutes)",y=top10_len.index,data=top10_len)

data.columns

data["Year"].value_counts()

sns.countplot(x="Year",data = data)
plt.title("Number of movies per year")
plt.show()

data[data["Revenue (Millions)"].max()==data["Revenue (Millions)"]]["Title"]

top10_len =data.nlargest(10,"Rating")[["Title","Rating","Director"]].set_index("Title")
top10_len

sns.barplot(x="Rating",y=top10_len.index,data=top10_len,hue ="Director",dodge = False)
plt.legend(bbox_to_anchor=(1.05,1),loc=2)

data.nlargest(10,"Revenue (Millions)")["Title"]

top_10 = data.nlargest(10,'Revenue (Millions)')[['Title','Director','Revenue (Millions)']].set_index('Title')

top_10

sns.barplot(x='Revenue (Millions)',y =top_10.index,data=top_10)
plt.title("Display Top 10 Highest Revenue Movie Titles")
plt.show()

data.groupby("Year")["Rating"].mean().sort_values(ascending = False)

sns.scatterplot(x="Rating",y="Revenue (Millions)",data = data)

def rating(rating):
    if rating>=7.0:
        return 'Excellent'
    elif rating>=6.0:
        return 'Good'
    else:
        return 'Average'

data['rating_cat']=data['Rating'].apply(rating)

data.head(1)

data["Genre"].dtype

len(data[data["Genre"].str.contains("Action",case = False)])